import telebot
import os
import sqlite3
from button_markup import ListUpdater

class DB_Getter:

    path = 'db.sqlite3'

    def getAllRows(self, poles='title, author, annotation, url, image'):
        conn = sqlite3.connect(self.path)
        cur = conn.cursor()
        cur.execute(f'SELECT {poles} FROM books')
        data = cur.fetchall()
        cur.close()
        conn.close()
        return data
    
    def getRow(self, poles='title, author, annotation, url, image', condition=None):
        if condition is None:
            raise ValueError
        conn = sqlite3.connect(self.path)
        cur = conn.cursor()
        cur.execute(f'SELECT {poles} FROM books WHERE {condition}')
        data = cur.fetchone()
        # print(data)
        cur.close()
        conn.close()
        return data


def load_dotenv():
    # print(type(os.environ), os.environ)
    with open('.env', encoding='utf8') as f:
        vars = [ln.split('=') for ln in f.readlines()]
    for k, v in vars:
        os.environ[k] = v

load_dotenv()
data_loader = DB_Getter()
list_updater = ListUpdater(data_loader)
bot = telebot.TeleBot(token=os.environ['TOKEN'])

# args
# content-types: list[str] = 'text' | 'document' | 'audio' 
# commands: list[str] = 'start' (all that starts with slash ) 
@bot.message_handler(commands=['start'])
def start(message: telebot.types.Message):
    # markup = listBook_markup()
    markup = list_updater.markup
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name} üëãüèª. –ü–∏—à–∏ /help, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É.', reply_markup=markup)
    bot.register_next_step_handler(message, message_listener)

# def listBook_markup():
#     titles = data_loader.getAllRows('title')
#     kb_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
#     for i in range(1, len(titles), 2):
#         kb_markup.row(telebot.types.KeyboardButton(titles[i - 1][0]), telebot.types.KeyboardButton(titles[i][0]))
#     if len(titles) % 2:
#         kb_markup.row(telebot.types.KeyboardButton(titles[len(titles) - 1][0]))
#     return kb_markup

@bot.message_handler(commands=['help'])
def help(message: telebot.types.Message):
    bot.send_message(message.chat.id, '''–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –∫–Ω–∏–≥–µ
/list - —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
/start - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞
/dev - –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
''')

@bot.message_handler(commands=['list'])
def printListBooks(message: telebot.types.Message):
    id_title = data_loader.getAllRows('id, title')
    answer = ''
    for i, tup in enumerate(id_title):
        answer += f'{i + 1}. {tup[1]} (id: {tup[0]})\n'
    bot.send_message(message.chat.id, answer)

@bot.message_handler(commands=['dev'])
def about_dev(message: telebot.types.Message):
    bot.send_message(message.chat.id, 'üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ @hxBQd.\n–¢–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.')

def message_listener(message: telebot.types.Message):
    if message.text in ('‚û°Ô∏è', '‚¨ÖÔ∏è'):
        change_markup(message)
        return
    book = data_loader.getRow(condition=f'title="{message.text}"')
    if book is None:
        bot.send_message(message.chat.id, '–Ø –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π –∫–Ω–∏–≥–∏\n–ó–∞—Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–Ω–∏–≥–∏ –Ω–∞–ø–∏—à–∏ /start, —Å–ø—Ä–∞–≤–∫–∞ - /help', reply_markup=telebot.types.ReplyKeyboardRemove())
        return
    else:
        printBook(message, book)

# @bot.message_handler(content_types=['text'])
def printBook(message: telebot.types.Message, book):
    about = f'''–ù–∞–∑–≤–∞–Ω–∏–µ: {book[0]}
–ê–≤—Ç–æ—Ä: {book[1]}
–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: {book[2]}
–ü—Ä–æ—á–∏—Ç–∞—Ç—å: {book[3]}
'''
    bot.send_photo(message.chat.id, photo=book[4])  # , caption=about
    bot.send_message(message.chat.id, about, reply_to_message_id=message.id)
    bot.register_next_step_handler(message, message_listener)

def change_markup(message: telebot.types.Message):
    list_updater.create_markup(message.text)
    bot.send_message(message.chat.id, message.text, reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.send_message(message.chat.id, message.text, reply_markup=list_updater.markup)
    # print(message.text)
    bot.register_next_step_handler(message, message_listener)
    

bot.polling(non_stop=True, interval=0)